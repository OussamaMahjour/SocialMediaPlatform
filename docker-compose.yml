services:
        gateway:
            container_name: gateway
            build:
                context: services/gateway
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8080:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            depends_on:
                -   auth-db

        discovery:
            container_name: discovery
            build:
                context: services/discovery
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8761:8761"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8761/health" ]
                interval: 15s
                retries: 6

        config-service:
            container_name: config-service
            build:
                context: services/config-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8090:8090"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8761/health" ]
                interval: 15s
                retries: 6

        auth-service:
            container_name: auth-service
            build:
                context: services/auth-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8082:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            depends_on:
                - auth-db

        auth-db:
            container_name: auth-db
            image: mysql:8.0
            volumes:
                - ./storage/auth-db:/var/lib/mysql
            restart: always
            environment:
                MYSQL_PASSWORD: root
                MYSQL_USER: mysql
                MYSQL_DATABASE: auth_db
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            ports:
                - "3308:3306"


        user-service:
            container_name: user-service
            build:
                context: services/user-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8083:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            environment:
                - DISCOVERY_SERVICE_URL=http://discovery-service:8080/eureka
                - CONFIG_SERVICE_URL=http://config-service:8080
#            depends_on:
#                config-service:
#                    condition: service_healthy
#                user-db:
#                    condition: service_started

        user-db:
            container_name: user-db
            image: mysql:8.0
            volumes:
                - ./storage/user-db:/var/lib/mysql
            restart: always
            environment:
                MYSQL_PASSWORD: root
                MYSQL_USER: mysql
                MYSQL_DATABASE: user_service_db
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            ports:
                - "3307:3306"


        post-service:
            container_name: post-service
            build:
                context: services/post-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8087:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
#
        post-db:
            image: mongo:7.0.5
            container_name: post-db
            volumes:
                - ./storage/post-db:/data/db
            restart: always
            environment:
                MONGO_INITDB_ROOT_USERNAME: root
                MONGO_INITDB_ROOT_PASSWORD: root
                MONGO_INITDB_DATABASE: post
            ports:
                - "27010:27017"

        media-service:
            container_name: media-service
            build:
                 context: services/media-service
                 dockerfile: ../../docker/java/Dockerfile
            volumes:
                -   ./storage/media/storage:/media
            ports:
                - "8888:8888"
            depends_on:
                -   minio

        media-db:
            image: mongo:7.0.5
            container_name: media-db
            volumes:
                - ./storage/media/db:/data/db
            restart: always
            environment:
                MONGO_INITDB_ROOT_USERNAME: root
                MONGO_INITDB_ROOT_PASSWORD: root
                MONGO_INITDB_DATABASE: media
            ports:
                - "27020:27017"

        minio:
            image: minio/minio:RELEASE.2023-06-29T05-12-28Z.fips
            container_name: minio
            ports:
                - "9000:9000"
                - "9001:9001"
            volumes:
                - ./storage/media/minio:/data
            environment:
                MINIO_ROOT_USER: admin1234
                MINIO_ROOT_PASSWORD: admin1234
            command: server --console-address ":9001" /data