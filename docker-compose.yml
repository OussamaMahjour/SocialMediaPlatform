services:
        gateway:
            container_name: gateway
            build:
                context: services/gateway
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8080:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            depends_on:
                -   auth-db

        discovery:
            container_name: discovery
            build:
                context: services/discovery
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8761:8761"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8761/health" ]
                interval: 15s
                retries: 6

        config-service:
            container_name: config-service
            build:
                context: services/config-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8090:8090"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8090/health" ]
                interval: 15s
                retries: 6

        auth-service:
            container_name: auth-service
            build:
                context: services/auth-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8082:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            depends_on:
                - auth-db

        auth-db:
            container_name: auth-db
            image: mysql:8.0
            volumes:
                - ./storage/auth-db:/var/lib/mysql
            restart: always
            environment:
                MYSQL_PASSWORD: root
                MYSQL_USER: mysql
                MYSQL_DATABASE: auth_db
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            ports:
                - "3308:3306"


        user-service:
            container_name: user-service
            build:
                context: services/user-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8083:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
            environment:
                - DISCOVERY_SERVICE_URL=http://discovery-service:8080/eureka
                - CONFIG_SERVICE_URL=http://config-service:8080
            depends_on:
                config-service:
                    condition: service_healthy
                user-db:
                    condition: service_started

        user-db:
            container_name: user-db
            image: mysql:8.0
            volumes:
                - ./storage/user-db:/var/lib/mysql
            restart: always
            environment:
                MYSQL_PASSWORD: root
                MYSQL_USER: mysql
                MYSQL_DATABASE: user_service_db
                MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
            ports:
                - "3307:3306"


        post-service:
            container_name: post-service
            build:
                context: services/post-service
                dockerfile: ../../docker/java/Dockerfile
            ports:
                - "8087:8080"
            healthcheck:
                test: [ "CMD","curl","-f", "http://localhost:8080/health" ]
                interval: 15s
                retries: 6
#
        post-db:
            image: mongo:7.0.5
            container_name: post-db
            volumes:
                - ./storage/post-db:/data/db
            restart: always
            environment:
                MONGO_INITDB_ROOT_USERNAME: root
                MONGO_INITDB_ROOT_PASSWORD: root
                MONGO_INITDB_DATABASE: post
            ports:
                - "27010:27017"

        media-service:
            container_name: media-service
            build:
                 context: services/media-service
                 dockerfile: ../../docker/java/Dockerfile
            volumes:
                -   ./storage/media/storage:/media
            ports:
                - "8888:8888"
            depends_on:
                -   minio

        media-db:
            image: mongo:7.0.5
            container_name: media-db
            volumes:
                - ./storage/media/db:/data/db
            restart: always
            environment:
                MONGO_INITDB_ROOT_USERNAME: root
                MONGO_INITDB_ROOT_PASSWORD: root
                MONGO_INITDB_DATABASE: media
            ports:
                - "27020:27017"

        minio:
            image: minio/minio:RELEASE.2023-06-29T05-12-28Z.fips
            container_name: minio
            ports:
                - "9000:9000"
                - "9001:9001"
            volumes:
                - ./storage/media/minio:/data
            environment:
                MINIO_ROOT_USER: admin1234
                MINIO_ROOT_PASSWORD: admin1234
            command: server --console-address ":9001" /data

        kafka:
            container_name: kafka
            image: apache/kafka:3.9.0
            hostname: kafka
            environment:
                KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
                KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
                KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
                KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"  # Defines the controller voters.
                KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
                KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
                KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
                KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
                KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
                KAFKA_LOG_DIRS: /var/lib/kafka/data  # Where Kafka stores its logs.
                KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"  # Kafka will automatically create topics if needed.
                KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1  # Since weâ€™re running one broker, one replica is enough.
                KAFKA_LOG_RETENTION_HOURS: 168  # Keep logs for 7 days.
                KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0  # No delay for consumer rebalancing.
            ports:
                - "9092:9092"
                - "9093:9093"
            expose:
                - "9092"
                - "9093"

        kafka-ui:
            container_name: kafka-ui
            image: provectuslabs/kafka-ui:latest
            ports:
                - 8080:8080
            depends_on:
                - kafka
            environment:
                DYNAMIC_CONFIG_ENABLED: 'true'
                KAFKA_CLUSTERS_0_NAME: wizard_test
                KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092